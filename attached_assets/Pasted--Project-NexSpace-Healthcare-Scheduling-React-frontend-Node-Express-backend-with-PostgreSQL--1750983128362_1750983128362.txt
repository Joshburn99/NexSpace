**Project**: NexSpace – Healthcare Scheduling (React frontend, Node/Express backend with PostgreSQL/Drizzle)

**Issue Summary**:  
Shift Templates are not working correctly. Edits to templates don’t persist, and regenerating a template’s shifts doesn’t update the Enhanced Calendar view. Also, duplicate code paths and data sources exist for shift templates.

**Relevant Code**:
- Frontend: `client/src/pages/shift-templates-page.tsx` (manages Shift Templates UI with React Query)  
- Frontend (legacy): `client/src/pages/scheduling-templates-page.tsx` (old dummy data page, should be removed)  
- Backend: `server/routes.ts` – contains API routes for `/api/shift-templates` (POST, PUT, PATCH, DELETE, REGENERATE) and `/api/shifts` (GET calendar data).

**Problems to Fix**:
1. **Template Edit Save Bug**: Ensure that editing a template sends all required fields and the backend properly saves them. There’s likely a mismatch between camelCase fields on the frontend and snake_case in the DB. The `updateTemplateMutation` in `shift-templates-page.tsx` calls PUT `/api/shift-templates/:id`. On the backend, this uses `insertShiftTemplateSchema.partial().parse(req.body)` and updates the DB. We need to verify fields like `daysOfWeek`, `facilityName`, etc., are not lost in this process. Add debugging or fix mapping as needed so that after editing, the template’s data in DB is updated. (Check that `updateData` includes all keys; perhaps the frontend isn’t including `facilityName` or `notes` if they weren’t changed – make sure it does.)

2. **Duplicate Template Components**: Remove or disable `SchedulingTemplatesPage`. All template management should use `ShiftTemplatesPage`. This means deleting the unused component and any references to it (the route `/scheduling` already maps to `ShiftTemplatesPage`, so just clean up). This avoids confusion and ensures only one source of truth.

3. **Regeneration Logic**:
   - In `routes.ts`, modify the **PUT** `/api/shift-templates/:id` handler. Currently it always calls `await regenerateShiftsFromTemplate(template)`. Change this to:
     - Only call `regenerateShiftsFromTemplate` if the template’s `isActive` is true (the template object is retrieved after update; check `template.isActive`).
     - If `isActive` is false, skip regeneration (just return the updated template data).
   - Modify the **PATCH** `/api/shift-templates/:id/status` handler. For `isActive = false` (deactivation), **do not delete** existing shifts. Remove the `db.delete(generatedShifts)...` call under the deactivation case. Instead, perhaps log or handle that no new shifts will be generated. (If there’s a need to mark those shifts as not to be filled, we could add a field later, but for now just leave them.)
   - (Optional) For `isActive = true` (activation), the code currently calls `generateShiftsFromTemplate(template)`. That’s okay for now (it will generate fresh future shifts if none or if some were removed on deactivate).
   - **Auto-generation**: There’s currently no timed job to extend shifts daily. While implementing a full cron job is outside this immediate fix, leave a TODO or note. For example, mention using a scheduled function to call `generateShiftsFromTemplate` daily or to implement an incremental generation (only the next day’s shifts) to maintain the `daysPostedOut` window.

4. **Calendar Shifts Endpoint Cleanup** (`GET /api/shifts` in `routes.ts`):
   - Stop using `getShiftData()` that merges example shifts. We want the calendar to reflect real data only. You can do this by either:
     a) Removing example shifts entirely from production code. (E.g., comment out or delete the hardcoded `exampleShifts` array and just use the database results.)
     b) Or only use `exampleShifts` if the DB returns no shifts. A simple check: after retrieving `dbGeneratedShifts` and `dbMainShifts`, if both are empty and perhaps no templates exist, then you could fall back to example data. Otherwise, skip it.
   - Remove usage of `global.templateGeneratedShifts` for calendar data. The `generated_shifts` table is now the source of truth. Ensure `db.select().from(generatedShifts)` is used to get all template-generated shifts. After regeneration, those new shifts go into this table, so they will be picked up.
   - Update the `getShiftAssignments` logic if needed: it currently searches `getShiftData()` for a target shift (for shift requests). Change that to first check the DB (`storage.getGeneratedShift(shiftId)`) which is already being done if not found in `exampleShifts`. Since we’ll remove example shifts, all shifts should be either in `generatedShifts` or `shifts` tables.
   - Ensure the response combines `formattedGeneratedShifts` and `formattedMainShifts` (shifts from main table) correctly. We will have dropped the dummy data, so `allShifts = formattedDbShifts` essentially (plus any assignment decoration logic that follows).

5. **Frontend Refresh**:
   - After making backend changes, adjust frontend if needed. The `ShiftTemplatesPage` uses `invalidateQueries(["/api/shifts"])` on regen and status toggle. That should trigger the calendar to refetch. If we find the calendar not updating immediately, we can call the `refetchShifts()` function (obtained from `useQuery`) after those mutations as a guarantee.
   - Also, consider adding a small success message or indicator when regeneration is done (the code already toasts “Shifts Regenerated” on success).

6. **Testing**:
   - Run the app. Create a new template, ensure it appears in the list and generates shifts (check DB or calendar).
   - Edit that template (change times or days). Save and verify the list reflects the change. Also check the `generatedShiftsCount` updates and the calendar updates (shifts move to new times or days).
   - Toggle the template inactive. Verify that existing shifts remain on calendar. Toggle active again and maybe regenerate to see shifts come back or extend.
   - Ensure no duplicate shifts or example shifts are seen on the calendar (unless the DB is truly empty and you want to show dummy data).
   - Check console logs for any errors during these actions and fix as needed.

**Goal**: After these changes, template editing and regeneration should work as expected:
- Edits persist and propagate to generated shifts.
- The Enhanced Calendar shows up-to-date shifts from templates.
- Deactivating a template stops new shift creation but doesn’t wipe current ones.
- The codebase is cleaner (single template page, single data source for shifts).
