# PROJECT CONTEXT
We need to enforce consistent code style, catch lint errors, and enable strict TypeScript checking across our React/TypeScript codebase.

# TASKS
1. **ESLint & Prettier**  
   - Create `.eslintrc.js` with:
     ```js
     module.exports = {
       parser: '@typescript-eslint/parser',
       plugins: ['@typescript-eslint', 'react'],
       extends: [
         'eslint:recommended',
         'plugin:react/recommended',
         'plugin:@typescript-eslint/recommended',
         'prettier'
       ],
       rules: {
         'semi': ['error', 'always'],
         'quotes': ['error', 'single'],
         'no-console': 'warn',
         'comma-dangle': ['error', 'always-multiline']
       },
       settings: { react: { version: 'detect' } }
     };
     ```
   - Create `.prettierrc`:
     ```json
     { "singleQuote": true, "semi": true, "printWidth": 80, "trailingComma": "all" }
     ```
   - Install devDeps: `eslint`, `@typescript-eslint/parser`, `@typescript-eslint/eslint-plugin`, `eslint-plugin-react`, `prettier`, `eslint-config-prettier`.

2. **TypeScript Strict Mode**  
   - In `tsconfig.json` under `compilerOptions`, set:
     ```diff
     + "strict": true,
     + "noImplicitAny": true,
     + "strictNullChecks": true,
     + "strictFunctionTypes": true,
     + "strictPropertyInitialization": true,
     + "noImplicitThis": true,
     + "alwaysStrict": true
     ```
3. **Dependency Audit**  
   - Add scripts in `package.json`:
     ```json
     "scripts": {
       "lint": "eslint . --ext .ts,.tsx",
       "format": "prettier --write .",
       "audit": "npm audit",
       "audit:fix": "npm audit fix"
     }
     ```

# FILES TO EDIT
- `.eslintrc.js`
- `.prettierrc`
- `tsconfig.json`
- `package.json`

# SUCCESS CRITERIA
- `npm run lint` shows zero errors (or only intentional ones).  
- `npm run format` cleans code.  
- `npm run build` completes without type errors.  
- `npm run audit` reports no high/critical vulnerabilities (or documents any manual fixes).

BEGIN!
