### FIX FACILITY DASHBOARD 500s & CRASH ###

❶  BACKEND PATCHES  (server/routes.ts)

🔸 Replace /api/staff route:
------------------------------------------------------------------
app.get('/api/staff', async (req, res) => {
  try {
    // super-admins see everyone
    if (req.user?.role === 'super_admin') {
      const rows = await getAllStaff();
      return res.json(rows);
    }
    // existing facility-filtered logic ↓ keeps working
    const rows = await getFacilityStaff(req.user?.facilityId);
    res.json(rows);
  } catch (err) {
    console.error('[API /staff] error:', err);
    res.status(500).json({ message: err?.message || 'Internal error' });
  }
});
------------------------------------------------------------------

🔸 Replace /api/shifts route so ?status=open,requested works:
------------------------------------------------------------------
app.get('/api/shifts', async (req, res) => {
  const statuses = typeof req.query.status === 'string'
    ? req.query.status.split(',').map(s => s.trim())
    : undefined;

  try {
    const rows = await getUnifiedShifts({ statuses });
    res.json(rows);
  } catch (err) {
    console.error('[API /shifts] error:', err);
    res.status(500).json({ message: err?.message || 'Internal error' });
  }
});
------------------------------------------------------------------

❷  DATA-LAYER UPDATE  (server/fix-shifts-api.ts or wherever getUnifiedShifts lives)

------------------------------------------------------------------
export async function getUnifiedShifts({ statuses = [] } = {}) {
  const whereSql = statuses.length
    ? sql`WHERE shifts.status IN (${sql.join(statuses)})`
    : sql``;

  const result = await db.query(sql`
    SELECT shifts.*, staff.name AS staff_name
    FROM shifts
    LEFT JOIN staff ON staff.id = shifts.staff_id
    ${whereSql}
  `);
  return result.rows;
}
------------------------------------------------------------------

❸  FRONTEND HARDENING  (src/pages/FacilityUserDashboard.tsx)

➤ Add helper to safely parse JSON:
------------------------------------------------------------------
const fetchJSON = async (url: string) => {
  const res = await fetch(url, { credentials: 'include' });
  const text = await res.text();
  try { return JSON.parse(text); }
  catch {
    console.error('[FACILITY DASHBOARD] Non-JSON:', text.slice(0, 200));
    throw new Error('Bad JSON from ' + url);
  }
};
------------------------------------------------------------------

➤ Use it in React-Query and show friendly error:
------------------------------------------------------------------
const { data, error, refetch, isLoading } = useQuery(
  ['dashboard', 'staff'],
  () => fetchJSON('/api/staff')
);

if (error) {
  return (
    <Center mt="lg">
      <Text color="red">Error loading dashboard.</Text>
      <Button onClick={() => refetch()}>Retry</Button>
    </Center>
  );
}
------------------------------------------------------------------

### APPLY ONLY THESE CHANGES — NOTHING ELSE ###
Show me the diffs for the three files above, then stop.