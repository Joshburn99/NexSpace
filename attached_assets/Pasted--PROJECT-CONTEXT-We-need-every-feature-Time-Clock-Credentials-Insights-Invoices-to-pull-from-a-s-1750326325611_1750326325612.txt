# PROJECT CONTEXT
We need every feature—Time Clock, Credentials, Insights, Invoices—to pull from a single source of truth so data stays in sync.

# TASKS

1. **Create Contexts with Sample Data**  
- New files under `src/context/`:

**TimeClockContext.tsx**
```ts
import React, {createContext,useContext} from 'react';
export type TimeClock = { userId:string; timestamp:string; type:'in'|'out' };
const sampleClocks:TimeClock[] = [
  { userId:'u1', timestamp:'2025-06-19T08:00:00Z', type:'in' },
  { userId:'u1', timestamp:'2025-06-19T16:00:00Z', type:'out' },
  // …more…
];
const Ctx = createContext<TimeClock[]|null>(null);
export const TimeClockProvider:React.FC<{children:React.ReactNode}> = ({children})=>(
  <Ctx.Provider value={sampleClocks}>{children}</Ctx.Provider>
);
export const useTimeClocks=()=>{const c=useContext(Ctx);if(!c)throw new Error('useTimeClocks must be inside');return c;};
CredentialsContext.tsx

ts
Copy
Edit
import React, {createContext,useContext} from 'react';
export type Credential = { userId:string; expires:string };
const sampleCreds:Credential[] = [
  { userId:'u1', expires:'2025-06-30' },
  { userId:'u2', expires:'2025-05-01' }, // expired
  // …more…
];
export const CredentialsContext=createContext<Credential[]|null>(null);
export const CredentialsProvider:React.FC<{children:React.ReactNode}>=({children})=>(
  <CredentialsContext.Provider value={sampleCreds}>{children}</CredentialsContext.Provider>
);
export const useCredentials=()=>{const c=useContext(CredentialsContext);if(!c)throw new Error('useCredentials must be inside');return c;};
InsightsContext.tsx (for demonstration, seed some metrics)

ts
Copy
Edit
import React, {createContext,useContext} from 'react';
export type Insight={ key:string; value:number };
const sampleInsights:Insight[] = [
  { key:'totalHours', value:40 },
  { key:'noShowRate', value:5 },
  // …more…
];
export const InsightsContext=createContext<Insight[]|null>(null);
export const InsightsProvider:React.FC<{children:React.ReactNode}>=({children})=>(
  <InsightsContext.Provider value={sampleInsights}>{children}</InsightsContext.Provider>
);
export const useInsights=()=>{const c=useContext(InsightsContext);if(!c)throw new Error('useInsights must be inside');return c;};
InvoiceContext.tsx

ts
Copy
Edit
import React, {createContext,useContext} from 'react';
export type Invoice={ id:string; userId:string; amount:number; paid:boolean };
const sampleInvoices:Invoice[] = [
  { id:'inv1', userId:'u1', amount:500, paid:false },
  // …more…
];
export const InvoiceContext=createContext<Invoice[]|null>(null);
export const InvoiceProvider:React.FC<{children:React.ReactNode}> = ({children})=>(
  <InvoiceContext.Provider value={sampleInvoices}>{children}</InvoiceContext.Provider>
);
export const useInvoices=()=>{const c=useContext(InvoiceContext);if(!c)throw new Error('useInvoices must be inside');return c;};
Wrap App in All Providers

Edit src/App.tsx:

diff
Copy
Edit
-import { ShiftProvider } from '@/context/ShiftContext';
+import { ShiftProvider }       from '@/context/ShiftContext';
+import { TimeClockProvider }   from '@/context/TimeClockContext';
+import { CredentialsProvider } from '@/context/CredentialsContext';
+import { InsightsProvider }    from '@/context/InsightsContext';
+import { InvoiceProvider }     from '@/context/InvoiceContext';
 function App(){
   return (
     <QueryClientProvider client={queryClient}>
       <AuthProvider>
         <TooltipProvider>
           <Toaster />
-          <ShiftProvider>
-            <Layout><Router/></Layout>
-          </ShiftProvider>
+          <ShiftProvider>
+            <TimeClockProvider>
+              <CredentialsProvider>
+                <InsightsProvider>
+                  <InvoiceProvider>
+                    <Layout>
+                      <Router/>
+                    </Layout>
+                  </InvoiceProvider>
+                </InsightsProvider>
+              </CredentialsProvider>
+            </TimeClockProvider>
+          </ShiftProvider>
Replace Direct Queries

In every file under src/components or src/pages that does useQuery for shifts, clocks, credentials, insights, or invoices:

Remove the useQuery import and call.

Import the corresponding use... hook.

Destructure from it:

ts
Copy
Edit
const shifts = useShifts();
const clocks = useTimeClocks();
const creds  = useCredentials();
const ins    = useInsights();
const invs   = useInvoices();
Render from those arrays instead of the old data.

FILES TO EDIT
src/context/*.tsx (new)

src/App.tsx

All shift/clock/credential/insight/invoice UIs

SUCCESS CRITERIA
✔️ Time Clock tab shows useTimeClocks() data
✔️ Credentials tab filters out expired useCredentials()
✔️ Insights pages read useInsights() metrics
✔️ Invoices page uses useInvoices()
✔️ No direct useQuery for those domains
✔️ All UIs stay in sync with one data source

BEGIN!