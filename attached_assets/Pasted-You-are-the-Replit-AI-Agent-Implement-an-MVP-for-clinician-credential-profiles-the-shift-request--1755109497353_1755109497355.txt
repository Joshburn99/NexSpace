You are the Replit AI Agent. Implement an MVP for clinician credential profiles + the shift request/approval/assignment workflow that updates the Calendar and notifies the right users. Keep current auth/roles; minimize schema churn.

A. Credentialing (view-first MVP)
	1.	Minimal schema (Drizzle) + migrations:
	•	credentials (id, staff_id, type, number, issued_at, expires_at, status: ‘verified’|‘pending’|‘expired’, verified_by, verified_at, file_url, notes)
	•	Optional documents table if needed: (id, owner_type, owner_id, kind, file_url, uploaded_at)
	•	Index: (staff_id, type), (expires_at)
	2.	Staff Profile → Credentials tab (/staff/:id/credentials):
	•	Cards list: License, BLS/CPR, TB, Background check, etc.
	•	Badge colors by status; expiration chips (warning ≤30d, danger ≤7d/expired).
	•	“View document” opens modal with image/PDF viewer.
	•	If no file uploaded, show a placeholder image; expose a dev-only button to auto-generate a branded placeholder (use Replit Image Generation to save PNG into /public/credentials/placeholders/).
	3.	Facility Profile → Roster Compliance subsection:
	•	For facility managers: list assigned staff with credential status snapshot and quick links.

B. Shift Request → Approval → Assignment
	1.	Minimal schema:
	•	shift_requests (id, shift_id, staff_id, message, status: ‘pending’|‘approved’|‘rejected’, created_at, decided_at, decided_by)
	•	Add columns on shifts if missing: assigned_staff_id, assigned_by, assigned_at, status (‘open’|‘pending’|‘filled’|‘cancelled’).
	•	Unique guard: one active request per (shift_id, staff_id).
	2.	API:
	•	POST /api/shifts/:id/request (role: staff) → creates pending request, sets shift.status=‘pending’ if no assignee.
	•	POST /api/shift-requests/:id/approve (role: admin/manager for that facility) → assigns staff to shift, sets status=‘filled’, records decided_by/at; auto-close other pending requests for that shift.
	•	POST /api/shift-requests/:id/reject → sets status=‘rejected’; if no other pending/assignee, shift returns to ‘open’.
	•	GET endpoints for listing pending requests for a facility manager.
	3.	UI:
	•	On Calendar event (no assignee): staff sees Request shift; managers see Assign.
	•	Facility Manager “Approvals” drawer/page listing pending requests with approve/reject actions.
	•	After approve: calendar updates to filled, and details show assigned RN name; show success toast.
	4.	Notifications (in-app MVP):
	•	Create notifications table (id, user_id, title, body, link, read_at, created_at).
	•	When a staff requests a shift: notify managers of the facility.
	•	When approved/rejected: notify the staff.
	•	Add a bell icon in the top bar with unread count and a small dropdown list. Mark-as-read on click.
	•	(Optional flags) EMAIL/SMS hooks behind feature flags if envs exist; default off in dev.
	5.	Realtime:
	•	Broadcast shift.requested, shift.approved, shift.rejected, shift.assigned on WebSocket so Calendar and Notifications update instantly.

C. Acceptance & artifacts
	•	Staff profile shows a Credentials tab with status colors, expiry chips, and a working doc viewer; placeholders available via image generation.
	•	Facility users have a Pending Requests view; approve/reject flows work with correct role checks.
	•	Calendar immediately reflects new status (open → pending → filled) and assigned staff.
	•	Notification bell shows and clears unread; events link back to the right page.
	•	README sections: “Credentialing (MVP)” and “Shift Requests & Approvals” with brief tables of states and roles.
	•	Curl smoke tests pasted for: request, approve, reject; plus one WebSocket event log excerpt.
	•	Diffs + concise changelog (file → why).

Keep additions minimal and idempotent; don’t break existing pages. If anything fails, fix then re-run before responding.
